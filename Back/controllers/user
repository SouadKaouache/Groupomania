const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const User = require("../models/User");
// // Importation du package emailValidator afin de vérifier le format d'une adresse mail. //
const emailValidator = require("email-validator");
// // Importation du package password validator afin de créer un schéma et attribuer des valeurs aux mots de passe pouvant être utilisés.
const passwordValidator = require("password-validator");
require("dotenv").config();
// Un token fort a été généré aléatoirement et stocker dans la variable d'environnement RANDOM_TOKEN_SECRET. //
const RANDOM_TOKEN_SECRET = process.env.RANDOM_TOKEN_SECRET;
// // Définition du passwordSchema et création de l'instance passwordValidator. //
const passwordSchema = new passwordValidator();
// Mise en place des règles pour la mise en place d'un mot de passe et exclusion des mots de passe faibles. //
passwordSchema
  // Mdp de minimum 8 caractères. //
  .is()
  .min(8)
  // Mdp de maximum 16 caractères. //
  .is()
  .max(16)
  // Mdp doit contenir au moins 1 majuscule. //
  .has()
  .uppercase(1)
  // Mdp doit contenir au moins 1 minuscule. //
  .has()
  .lowercase()
  // Mdp doit contenir au moins 1 chiffre. //
  .has()
  .digits(1)
  // Mdp ne doit pas contenir d'espace. //
  .has()
  .not()
  .spaces()
  // Mdp ne doit pas faire partie de cette liste. //
  .is()
  .not()
  .oneOf([
    "Passw0rd",
    "Password1",
    "Password123",
    "Azerty1",
    "Azerty123",
    "Motdepasse",
    "Motdepasse123",
  ]);

// async function login(req, res) {
//   const email = req.body;
//   const password = req.body;
//   try {
//     const user = await getUser(email);
//     if (user == null) return res.status(404).send({ error: "User not found" });
//     const validPassword = await controlPassword(user, password);
//     if (!validPassword)
//       return res.status(401).send({ error: "Wrong password" });
//     const token = generateToken(email);
//     console.log(token);
//     res.send({ token: token, email: user.email });
//   } catch (error) {
//     res.status(500).send({ error });
//   }
// }

exports.login = (req, res, next) => {
  User.findOne({ email: req.body.email })
    .then((user) => {
      if (!user) {
        return res.status(401).json({ error: "Utilisateur inconnu !" });
      }
      bcrypt
        .compare(req.body.password, user.password)
        .then((valid) => {
          if (!valid) {
            return res.status(401).json({ error: "Mot de passe incorrect !" });
          }
          res.status(200).json({
            // Si comparaison ok, on renvoit un objet JSON contenant //
            userId: user._id, // L'userId + //
            token: jwt.sign(
              // Un token - Fonction sign de JsonWebToken//
              { userId: user._id }, // 1er argument : données à encoder //
              RANDOM_TOKEN_SECRET, // 2ème : clé secréte encodage //
              { expiresIn: "24h" } // 3 :argument de configuration //
            ),
          });
        })
        .catch((error) => res.status(500).json({ error }));
    })

    .catch((error) => res.status(500).json({ error }));
};

exports.signup = (req, res) => {
  // Si son adresse mail n'est pas validée par emailValidator alors envoi du status 500 et du message correspondant. //
  if (!emailValidator.validate(req.body.email)) {
    return res
      .status(500)
      .send({ message: "Adresse email non valide. Vérifiez le format." });
  } else if (!passwordSchema.validate(req.body.password)) {
    // Si le mot de passe ne respecte pas le schéma établi alors envoi du status 500 et du message correspondant. //
    return res.status(500).send({
      message:
        "Le mot de passe doit contenir au moins : une minuscule, une majuscule, un chiffre. Il doit contenir entre 8 et 16 caractères sans espace ni symbole.",
    });
  } else {
    // Si le mail ET le mdp respectent les exigences alors on hash le mot de passe saisi lors de la requête en lui ajoutant 10 salage afin d'éviter les attaques par analyse fréquentielles. //
    bcrypt
      .hash(req.body.password, 10)
      // On récupère le hash et on l'attribue au mot de passe saisi par l'utilisateur. //
      .then((hash) => {
        const user = new User({
          name: req.body.name,
          email: req.body.email,
          password: hash,
        });
        // Sauvegarde de l'utilisateur et envoi du status 201 avec le message correspondant. //
        user
          .save()
          .then(() =>
            res.status(201).send({ message: "Utilisateur créé avec succès !" })
          )
          // Si un utilisateur existe déjà avec cette adresse, envoi du code 400 et de l'erreur. //
          .catch((error) => res.status(400).send({ error }));
      })
      // Envoi d'une erreur si le code ne s'éxécute pas correctement. //
      .catch((error) => res.status(500).send({ error }));
  }
};

// exports.signup = (req, res, next) => {
//   if (
//     req.body.name == null ||
//     req.body.email == null ||
//     req.body.password == null
//   ) {
//     return res.status(400).json({ error: "Données incomplètes" });
//   }
//   if (!regexEmail.test(req.body.email)) {
//     return res.status(400).json({ error: "Email non validé" });
//   }
//   if (!regexPassword.test(req.body.password)) {
//     return res.status(400).json({ error: "Mot de passe non validé" });
//   }
//   User.findOne({
//     attributes: ["email"],
//     where: { email: req.body.email },
//   }) //Vérification si un utilisateur corresponde déjà à l'email de la DB//
//     .then((user) => {
//       if (!user) {
//         bcrypt
//           .hash(req.body.password, 10) //Fonction pour hasher un mot de passe fonction async//
//           .then((hash) => {
//             console.log(hash);
//             const signUser = User.create({
//               name: req.body.name,
//               email: req.body.email,
//               password: hash,
//             }).then((user) => {
//               console.log(user);
//               res.status(201).json({ message: "Utilisateur créé !" });
//             });
//           })
//           .catch((error) => res.status(400).json({ error }));
//       }
//     })

//     .catch((error) =>
//       res.status(500).json({ error: "Utilisateur déjà existant" })
//     );
// };

function getUser(email) {
  return User.find({ where: { email } });
}

// module.exports = { signup };
